{
  "sake_version": "1.0.0",
  "lid": "LID-2025-09-14-NEXUS-INJECT-0001",
  "taskir": {
    "task_name": "nexus.inject.v1",
    "intent": "Inject a new text document into the Nexus vector memory, ensuring it is embedded, labeled, and stored with full lineage.",
    "inputs": [
      {
        "name": "text_content",
        "type": "str",
        "description": "The raw text content to be injected."
      },
      {
        "name": "source_id",
        "type": "str",
        "description": "An identifier for the source of the text, e.g., a file path or URL."
      }
    ],
    "outputs": [
      {
        "name": "vector_id",
        "type": "str",
        "description": "The unique ID assigned to the newly created vector in the metadata DB."
      },
      {
        "name": "fingerprint",
        "type": "str",
        "description": "The SHA256 fingerprint of the stored vector."
      }
    ],
    "algorithm": "Normalize and tokenize text. Call embedder service to get a vector. Call labeler service to get domain/intent labels. Check for duplicates against the FAISS index. If unique, add to FAISS and write metadata to SQLite DBs (vector_storage, thought_log). Record lineage.",
    "pseudocode": "1. text = normalize(inputs.text_content)\n2. vector = embed(text)\n3. labels = label(text)\n4. if not is_duplicate(vector):\n5.   vector_id, fingerprint = store_vector(vector, labels)\n6.   link_lineage(parent=inputs.source_id, child=vector_id)\n7.   return vector_id, fingerprint",
    "constraints": [
      "Must not proceed if duplicate similarity is above threshold (0.95).",
      "Must use the production embedder model."
    ],
    "contracts": [
      {
        "contract_type": "result_contains_keys",
        "details": {
          "keys": ["vector_id", "fingerprint"]
        }
      },
      {
        "contract_type": "db_row_exists",
        "details": {
          "table": "vector_storage",
          "lookup_key": "vector_id"
        }
      }
    ],
    "tests": [
      {
        "case_name": "happy_path_injection",
        "description": "Tests a standard, unique text injection.",
        "inputs": {
          "text_content": "This is a test document for Nexus.",
          "source_id": "test-case-001"
        },
        "expected_outcome": {
          "vector_id_is_not_null": true
        }
      }
    ],
    "runtime_hints": [],
    "metrics": [
      {
        "metric_name": "injection_latency_ms",
        "target": 250,
        "operator": "<="
      }
    ],
    "artifacts": [
      "logs/nexus_inject.log"
    ],
    "state": {
      "version": "1.0.0",
      "owner": "citadel/nexus-ops",
      "created_at": "2025-09-14T12:00:00Z",
      "last_updated": "2025-09-14T12:00:00Z"
    },
    "notes": "This is the primary TaskIR for adding new knowledge to the Nexus system."
  },
  "enums_bindings": {
    "action": "NEXUS_INJECT",
    "reflex": "RFX_MEMORY_WRITE_V2"
  },
  "caps": {
    "min_confidence": 0.70,
    "max_cost": 0.05,
    "max_latency_ms": 500,
    "security_tier_required": 4
  },
  "fate": {
    "xp_credit_on_success": 5,
    "tp_requirements": [
      "AGENT_HAS_WRITE_PERMISSION"
    ]
  },
  "governance": {
    "validator_passed": true,
    "policy_bundle_version": "caps_2025_q3_v1.1"
  },
  "dispatch": {
    "runner": "sake_nexus_adapter",
    "function": "execute_inject",
    "targets": [
      "nexus_runtime:v1.0"
    ]
  },
  "tests_report": {
    "status": "NOT_RUN",
    "cases": 0,
    "passed": 0
  },
  "audit": {
    "signatures": [],
    "diff_base_lid": "LID-2025-09-13-NEXUS-INJECT-0000"
  }
}
